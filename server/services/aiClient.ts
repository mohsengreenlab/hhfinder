import { GoogleGenerativeAI } from '@google/generative-ai';

const apiKey = process.env.GEMINI_API_KEY || '';
if (!apiKey) {
  console.error('GEMINI_API_KEY not found in environment variables');
} else {
  console.log('Gemini API key loaded, length:', apiKey.length);
}

const genAI = new GoogleGenerativeAI(apiKey);

export class AIClient {
  private model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
  private proModel = genAI.getGenerativeModel({ model: 'gemini-1.5-pro' });
  private lastRequestTime = 0;
  private readonly MIN_REQUEST_INTERVAL = 2000; // 2 seconds between requests

  private async waitForRateLimit(): Promise<void> {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;
    
    if (timeSinceLastRequest < this.MIN_REQUEST_INTERVAL) {
      const waitTime = this.MIN_REQUEST_INTERVAL - timeSinceLastRequest;
      console.log(`üïí Rate limiting: waiting ${waitTime}ms before next AI request`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
    
    this.lastRequestTime = Date.now();
  }

  private async makeAIRequest<T>(
    requestFn: () => Promise<T>,
    maxRetries: number = 3,
    baseDelay: number = 1000
  ): Promise<T> {
    await this.waitForRateLimit();
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        return await requestFn();
      } catch (error: any) {
        const isRetryable = error?.status === 503 || error?.status === 429 || error?.status === 500;
        
        if (!isRetryable || attempt === maxRetries) {
          throw error;
        }
        
        const delay = baseDelay * Math.pow(2, attempt - 1); // Exponential backoff
        console.log(`‚ö†Ô∏è  AI request failed (attempt ${attempt}/${maxRetries}), retrying in ${delay}ms...`);
        console.log(`Error: ${error?.status} - ${error?.message}`);
        
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    throw new Error('Max retries exceeded');
  }

  async generateRussianSeedTerms(userInput: string): Promise<{
    exactPhrases: string[];
    strongSynonyms: string[];
    weakAmbiguous: string[];
    allowedEnglishAcronyms: string[];
  }> {
    // Single-stage: Generate and categorize keywords directly
    const keywords = await this.generateJobKeywords(userInput);
    
    // Categorize without additional AI calls
    return this.categorizeKeywordsFallback(keywords);
  }

  private async generateJobKeywords(userInput: string): Promise<string[]> {
    // Ultra-simplified prompt focused on direct translation
    const prompt = `–ü–µ—Ä–µ–≤–µ–¥–∏ "${userInput}" –≤ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ HH.ru:

["—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "QA –∏–Ω–∂–µ–Ω–µ—Ä", "—Ç–µ—Å—Ç–µ—Ä"]

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è "${userInput}":`;

    console.log(`üéØ Generating keywords for: "${userInput}"`);
    console.log(`üìù Prompt: ${prompt.substring(0, 200)}...`);

    try {
      const result = await this.makeAIRequest(async () => {
        return await this.model.generateContent(prompt);
      });
      const response = result.response.text().trim();
      console.log(`‚úÖ AI response: ${response}`);
      
      // Extract JSON array from response
      let jsonText = response;
      
      // Handle various response formats
      if (response.includes('[') && response.includes(']')) {
        const start = response.indexOf('[');
        const end = response.lastIndexOf(']') + 1;
        jsonText = response.substring(start, end);
      }
      
      const parsed = JSON.parse(jsonText);
      const keywords = Array.isArray(parsed) ? parsed.slice(0, 15) : [];
      console.log(`üéØ Extracted keywords: ${keywords.join(', ')}`);
      return keywords;
      
    } catch (error) {
      console.error('Stage 1 keyword generation failed:', error);
      // Use intelligent fallback
      const fallbackKeywords = this.getFallbackJobKeywords(userInput.toLowerCase().trim());
      console.log(`üîÑ Using fallback keywords: ${fallbackKeywords.join(', ')}`);
      return fallbackKeywords;
    }
  }



  private getFallbackJobKeywords(input: string): string[] {
    console.log(`üîç Fallback mapping for input: "${input}"`);
    
    // Smart English-to-Russian job translation mappings
    const jobTranslations: Record<string, string[]> = {
      // Manager variations - English inputs
      'manager': [
        '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '—É–ø—Ä–∞–≤–ª—è—é—â–∏–π', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        '–ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤', 
        '—Å—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–¥–µ–ª–∞'
      ],
      'i want to be a manager': [
        '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '—É–ø—Ä–∞–≤–ª—è—é—â–∏–π', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        '–ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤', 
        '—Å—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–¥–µ–ª–∞'
      ],
      'want to be manager': [
        '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '—É–ø—Ä–∞–≤–ª—è—é—â–∏–π', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        '–ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤', 
        '—Å—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–¥–µ–ª–∞'
      ],
      
      // Tester variations
      'software tester': [
        '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è', 'QA', '—Ç–µ—Å—Ç–µ—Ä', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', 
        'QA –∏–Ω–∂–µ–Ω–µ—Ä', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', '–∏–Ω–∂–µ–Ω–µ—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É',
        'automation QA', 'manual QA', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ü–û'
      ],
      'tester': [
        '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', 'QA', '—Ç–µ—Å—Ç–µ—Ä', 'QA –∏–Ω–∂–µ–Ω–µ—Ä', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é',
        '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è', '–∏–Ω–∂–µ–Ω–µ—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ü–û',
        'automation QA', 'manual QA'
      ],
      'qa': [
        'QA', 'QA –∏–Ω–∂–µ–Ω–µ—Ä', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', '—Ç–µ—Å—Ç–µ—Ä', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é',
        '–∏–Ω–∂–µ–Ω–µ—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ü–û', 'automation QA', 'manual QA',
        '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è'
      ],
      
      // Developer variations
      'developer': [
        '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–∏–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ü–û', 
        'backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 
        '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'software engineer'
      ],
      'programmer': [
        '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–∏–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ü–û', 
        'backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 
        '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'Java —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
      ],
      
      // Russian inputs
      '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç': [
        '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç', '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∫–∞', '–±–∞—Ä–º–µ–Ω', '–±–∞—Ä–º–µ–Ω—à–∞', '–ø–µ—Ä—Å–æ–Ω–∞–ª —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', 
        '–æ–±—Å–ª—É–∂–∏–≤–∞—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª', '—Ä–∞–±–æ—Ç–Ω–∏–∫ –∑–∞–ª–∞', '—Å–µ—Ä–≤–µ—Ä', '—Ö–æ—Å—Ç–µ—Å', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ª–∞'
      ],
      '–º–µ–Ω–µ–¥–∂–µ—Ä': [
        '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '—É–ø—Ä–∞–≤–ª—è—é—â–∏–π', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        '–ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤', 
        '—Å—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–¥–µ–ª–∞'
      ],
      '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫': [
        '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', 'QA –∏–Ω–∂–µ–Ω–µ—Ä', '—Ç–µ—Å—Ç–µ—Ä', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', 
        '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è', 'QA', 'automation QA', 'manual QA', 
        '–∏–Ω–∂–µ–Ω–µ—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ü–û'
      ],
      '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç': [
        '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–∏–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ü–û', 
        'backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 
        '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'Java —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
      ],
    };

    const lowerInput = input.toLowerCase().trim();
    
    // Direct exact match first
    if (jobTranslations[lowerInput]) {
      console.log(`‚úÖ Direct match found for: "${lowerInput}"`);
      return jobTranslations[lowerInput].slice(0, 10);
    }
    
    // Partial match for complex phrases  
    for (const [key, translations] of Object.entries(jobTranslations)) {
      if (lowerInput.includes(key) || key.includes(lowerInput)) {
        console.log(`‚úÖ Partial match: "${lowerInput}" matches key "${key}"`);
        return translations.slice(0, 10);
      }
    }
    
    // Keyword-based matching
    const keywordMappings = {
      'manage': jobTranslations['manager'],
      'test': jobTranslations['tester'], 
      'develop': jobTranslations['developer'],
      'program': jobTranslations['programmer'],
      '–∫–æ–¥': jobTranslations['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'],
      '—Ä–∞–∑—Ä–∞–±–æ—Ç': jobTranslations['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'],
      '—Ç–µ—Å—Ç': jobTranslations['—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫'],
      '—É–ø—Ä–∞–≤': jobTranslations['–º–µ–Ω–µ–¥–∂–µ—Ä'],
      '—Ä—É–∫–æ–≤': jobTranslations['–º–µ–Ω–µ–¥–∂–µ—Ä']
    };
    
    for (const [keyword, translations] of Object.entries(keywordMappings)) {
      if (lowerInput.includes(keyword)) {
        console.log(`‚úÖ Keyword match: "${lowerInput}" contains "${keyword}"`);
        return translations.slice(0, 10);
      }
    }
    
    console.log(`‚ùå No mapping found for: "${lowerInput}", using generic fallback`);
    // Last resort: generic professional terms
    return [
      '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', '–º–µ–Ω–µ–¥–∂–µ—Ä', '—ç–∫—Å–ø–µ—Ä—Ç', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫',
      '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä', '–ø–æ–º–æ—â–Ω–∏–∫', '–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '—Å—Ç–∞–∂–µ—Ä'
    ];
  }

  private categorizeKeywordsFallback(keywords: string[]): {
    exactPhrases: string[];
    strongSynonyms: string[];
    weakAmbiguous: string[];
    allowedEnglishAcronyms: string[];
  } {
    const result = {
      exactPhrases: [] as string[],
      strongSynonyms: [] as string[],
      weakAmbiguous: [] as string[],
      allowedEnglishAcronyms: [] as string[]
    };

    const technicalTerms = ['Python', 'JavaScript', 'SQL', 'React', 'Node.js', 'Docker', 'AWS', 'GCP', 'ML', 'NLP', 'Java', 'C++', 'TypeScript', 'Angular', 'Vue'];
    const exactJobs = [
      '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç', '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∫–∞', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–¥–∏–∑–∞–π–Ω–µ—Ä', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', '–ø—Ä–æ–¥–∞–≤–µ—Ü',
      '–±—É—Ö–≥–∞–ª—Ç–µ—Ä', '–≤–æ–¥–∏—Ç–µ–ª—å', '–∫—É—Ä—å–µ—Ä', '–±–∞—Ä–º–µ–Ω', '–±–∞—Ä–º–µ–Ω—à–∞', '–ø–æ–≤–∞—Ä', '–∫–∞—Å—Å–∏—Ä', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      '—Å–µ–∫—Ä–µ—Ç–∞—Ä—å', '—é—Ä–∏—Å—Ç', '–≤—Ä–∞—á', '—É—á–∏—Ç–µ–ª—å', '–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å', '–∏–Ω–∂–µ–Ω–µ—Ä', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫'
    ];
    const strongSynonyms = [
      '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–¥–µ–≤–µ–ª–æ–ø–µ—Ä', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä', '—É–ø—Ä–∞–≤–ª—è—é—â–∏–π',
      '—Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', '–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', '–ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä',
      '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
      'QA –∏–Ω–∂–µ–Ω–µ—Ä', '—Ç–µ—Å—Ç–µ—Ä', '–∏–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    ];
    const weakTerms = ['—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '—ç–∫—Å–ø–µ—Ä—Ç', '—Ä–∞–±–æ—Ç–Ω–∏–∫', '–ø–æ–º–æ—â–Ω–∏–∫', '—Å—Ç–∞–∂–µ—Ä', 'junior'];

    // Ensure we have at least 10 keywords total by prioritizing the most relevant
    const totalNeeded = 10;
    let totalAssigned = 0;

    for (const keyword of keywords.slice(0, 15)) { // Process up to 15 keywords
      if (totalAssigned >= totalNeeded) break;
      
      const lower = keyword.toLowerCase();
      let assigned = false;
      
      // Check for technical terms first
      if (technicalTerms.some(tech => keyword.includes(tech))) {
        result.allowedEnglishAcronyms.push(keyword);
        assigned = true;
      }
      // Check for exact job titles
      else if (exactJobs.some(job => lower.includes(job))) {
        result.exactPhrases.push(keyword);
        assigned = true;
      }
      // Check for strong synonyms
      else if (strongSynonyms.some(syn => lower.includes(syn))) {
        result.strongSynonyms.push(keyword);
        assigned = true;
      }
      // Check for weak terms
      else if (weakTerms.some(weak => lower.includes(weak))) {
        result.weakAmbiguous.push(keyword);
        assigned = true;
      }
      // Default categorization for remaining terms
      else {
        // If it looks like a job title, put in exact phrases
        if (keyword.length <= 25 && !keyword.includes('—è —Ö–æ—á—É') && !keyword.includes('—Ä–∞–±–æ—Ç–∞—Ç—å')) {
          result.strongSynonyms.push(keyword);
          assigned = true;
        }
      }
      
      if (assigned) totalAssigned++;
    }

    // Ensure we have at least 10 total keywords distributed properly
    const currentTotal = result.exactPhrases.length + result.strongSynonyms.length + 
                        result.weakAmbiguous.length + result.allowedEnglishAcronyms.length;
    
    if (currentTotal < 10 && keywords.length > currentTotal) {
      // Add remaining keywords as strong synonyms up to 10 total
      const remaining = keywords.slice(currentTotal, 10);
      for (const keyword of remaining) {
        if (!keyword.includes('—è —Ö–æ—á—É') && keyword.trim().length > 2) {
          result.strongSynonyms.push(keyword);
        }
      }
    }

    // Cap each category to reasonable limits
    result.exactPhrases = result.exactPhrases.slice(0, 5);
    result.strongSynonyms = result.strongSynonyms.slice(0, 5);
    result.weakAmbiguous = result.weakAmbiguous.slice(0, 3);
    result.allowedEnglishAcronyms = result.allowedEnglishAcronyms.slice(0, 3);

    return result;
  }

  // AI relevance filtering for keywords
  async filterKeywordsByRelevance(userInput: string, keywords: string[]): Promise<{text: string; relevanceScore: number}[]> {
    const prompt = `
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∑–∞–ø—Ä–æ—Å: "${userInput}"

–û—Ü–µ–Ω–∏ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ —à–∫–∞–ª–µ 0-10:
- 10: –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Ç–æ—á–Ω—ã–π —Å–∏–Ω–æ–Ω–∏–º
- 8-9: –û—á–µ–Ω—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (—Ç–∞ –∂–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –Ω–æ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏)  
- 6-7: –ü–æ—Ö–æ–∂–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ —Å–º–µ–∂–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
- 4-5: –û—Ç–¥–∞–ª—ë–Ω–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
- 0-3: –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã

–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏: ${JSON.stringify(keywords)}

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ "text" –∏ "relevanceScore":
[
  {"text": "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "relevanceScore": 9},
  {"text": "–¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ", "relevanceScore": 6}
]

–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

    try {
      const result = await this.makeAIRequest(async () => {
        return await this.model.generateContent(prompt);
      });
      const response = result.response.text().trim();
      
      // Extract JSON from response
      let jsonText = response;
      if (response.includes('```json')) {
        jsonText = response.split('```json')[1].split('```')[0].trim();
      } else if (response.includes('```')) {
        jsonText = response.split('```')[1].split('```')[0].trim();
      }
      
      const parsed = JSON.parse(jsonText);
      
      // Validate and sort by relevance score
      const validatedResults = parsed
        .filter((item: any) => item.text && typeof item.relevanceScore === 'number')
        .sort((a: any, b: any) => b.relevanceScore - a.relevanceScore);
      
      return validatedResults;
    } catch (error) {
      console.error('AI relevance filtering failed:', error);
      // Enhanced fallback: assign relevance based on keyword position and content
      return keywords.map((text, index) => {
        // Give higher scores to earlier keywords and exact matches
        let score = Math.max(8 - index, 3); // Start high, decrease by position
        
        // Boost score for exact or partial matches with user input
        const lowerInput = userInput.toLowerCase();
        const lowerText = text.toLowerCase();
        
        if (lowerText === lowerInput) {
          score = 10; // Exact match
        } else if (lowerText.includes(lowerInput) || lowerInput.includes(lowerText)) {
          score = Math.min(score + 2, 9); // Partial match boost
        }
        
        return { text, relevanceScore: score };
      }).sort((a, b) => b.relevanceScore - a.relevanceScore);
    }
  }

  // Keep the legacy method for backward compatibility (deprecated)
  async generateJobTitles(userInput: string): Promise<string[]> {
    const seeds = await this.generateRussianSeedTerms(userInput);
    return [
      ...seeds.exactPhrases,
      ...seeds.strongSynonyms,
      ...seeds.weakAmbiguous,
      ...seeds.allowedEnglishAcronyms
    ];
  }

  async mapFiltersToHH(
    answers: any, 
    dictionaries: any
  ): Promise<{
    text: string;
    area?: string;
    experience?: string;
    employment?: string[];
    schedule?: string[];
    salary?: number;
    currency?: string;
    only_with_salary?: boolean;
    period?: number;
    order_by?: string;
  }> {
    const prompt = `
You are an HH.ru API specialist. Convert user answers to HH.ru search parameters.

User answers: ${JSON.stringify(answers)}

Available values from HH.ru dictionaries:
Experience: ${JSON.stringify(dictionaries.experience)}
Employment type: ${JSON.stringify(dictionaries.employment)}
Schedule: ${JSON.stringify(dictionaries.schedule)}
Currencies: ${JSON.stringify(dictionaries.currency)}
Sort order: ${JSON.stringify(dictionaries.vacancy_search_order)}

The user has selected these job keywords: ${answers.selectedKeywords?.join(', ') || 'none'}

Search options:
- Title-first search: ${answers.titleFirstSearch ? 'enabled (use search_field: ["name"])' : 'disabled (search all fields)'}
- Exact phrases: ${answers.useExactPhrases ? 'enabled (wrap keywords in quotes)' : 'disabled (plain text)'}

Important: Only include filter parameters in the response if the corresponding enableXFilter flag is true. For example, only include "area" if enableLocationFilter is true.

Return a JSON object with correct IDs from dictionaries. For the "text" field, combine the selected keywords considering the search options:
{
  "text": "combine selected keywords into search string",
  "area": "1", // Area ID (1 = Moscow, 2 = SPb, etc.)
  "experience": "ID_from_dictionary",
  "employment": ["ID1", "ID2"],
  "schedule": ["ID1", "ID2"], 
  "salary": number,
  "currency": "RUR",
  "only_with_salary": true/false,
  "period": number_of_days,
  "order_by": "sort_ID",
  "metro": "metro_station_id",
  "search_field": ["field_ID1", "field_ID2"],
  "label": ["label_ID1", "label_ID2"],
  "employer_id": "company_name_or_id",
  "education_level": "education_ID",
  "working_time_modes": ["mode_ID1", "mode_ID2"]
}
`;

    try {
      const result = await this.proModel.generateContent({
        contents: [{ role: 'user', parts: [{ text: prompt }] }],
        generationConfig: {
          temperature: 0.1,
          topK: 1,
          topP: 0.8,
        },
      });

      const response = result.response.text();
      const cleanJson = response.replace(/```json\n?|```\n?/g, '').trim();
      
      try {
        return JSON.parse(cleanJson);
      } catch (parseError) {
        console.error('Failed to parse AI response as JSON:', cleanJson);
        throw new Error('AI returned invalid JSON format');
      }
    } catch (error) {
      console.error('Filter mapping failed:', error);
      // Return basic fallback with proper keyword combination, but only include enabled filters
      const keywords = answers.selectedKeywords || [];
      
      // Apply exact phrases if enabled
      let keywordText: string;
      if (answers.useExactPhrases) {
        keywordText = keywords.map((k: string) => `"${k}"`).join(' OR ');
      } else {
        keywordText = keywords.join(' OR ');
      }
      
      const fallback: any = {
        text: keywordText
      };
      
      // Add search_field=name if title-first search is enabled
      if (answers.titleFirstSearch) {
        fallback.search_field = ['name'];
      }
      
      // Only include filters that are explicitly enabled
      if (answers.enableLocationFilter && answers.locationText) {
        fallback.area = answers.locationText?.includes('–ú–æ—Å–∫–≤–∞') ? '1' : undefined;
      }
      if (answers.enableExperienceFilter && answers.experienceText) {
        fallback.experience = 'doesNotMatter';
      }
      if (answers.enableEmploymentFilter && answers.employmentTypes?.length) {
        fallback.employment = ['full'];
      }
      if (answers.enableScheduleFilter && answers.scheduleTypes?.length) {
        fallback.schedule = ['fullDay'];
      }
      if (answers.enableSalaryFilter && answers.incomeNumber) {
        fallback.salary = answers.incomeNumber;
        fallback.currency = answers.currency || 'RUR';
        fallback.only_with_salary = answers.onlyWithSalary || false;
      }
      if (answers.enableMetroFilter && answers.metroStation) {
        fallback.metro = answers.metroStation;
      }
      if (answers.enableLabelFilter && answers.vacancyLabels?.length) {
        fallback.label = answers.vacancyLabels;
      }
      if (answers.enableEducationFilter && answers.educationLevel) {
        fallback.education_level = answers.educationLevel;
      }
      if (answers.enableWorkFormatFilter && answers.workFormats?.length) {
        fallback.working_time_modes = answers.workFormats;
      }
      
      // Always include basic search params
      fallback.period = answers.period || 7;
      fallback.order_by = answers.orderBy || 'relevance';
      
      return fallback;
    }
  }

  async generateCoverLetter(request: {
    name: string;
    employerName: string;
    areaName: string;
    skillsList: string[];
    plainDescription: string;
    userProfile?: string;
    customPrompt?: string;
  }): Promise<string> {
    // Use fallback immediately if we know we're over quota or service is unavailable
    // This prevents wasting API calls when we know they'll fail
    try {
      // Simplified, concise prompt to reduce token usage
      const prompt = `Write a brief professional cover letter in English:

Job: ${request.name} at ${request.employerName}
Skills needed: ${request.skillsList.slice(0, 3).join(', ')}
Description: ${request.plainDescription.substring(0, 400)}

Format: 3 short paragraphs, 150-200 words total, professional tone.`;

      const result = await this.makeAIRequest(async () => {
        return await this.model.generateContent(prompt);
      });
      
      const generatedText = result.response.text().trim();
      
      // Validate the response is reasonable
      if (generatedText.length < 50 || generatedText.includes('[')) {
        throw new Error('Generated text appears incomplete');
      }
      
      return generatedText;
      
    } catch (error) {
      console.error('Cover letter generation failed:', error);
      
      // Always fall back to template-based generation
      return this.generateFallbackCoverLetter(request);
    }
  }

  private generateFallbackCoverLetter(request: {
    name: string;
    employerName: string;
    areaName: string;
    skillsList: string[];
    plainDescription: string;
    userProfile?: string;
    customPrompt?: string;
  }): string {
    const skills = request.skillsList.slice(0, 3);
    const primarySkill = skills[0] || 'relevant experience';
    const secondarySkills = skills.slice(1).join(' and ') || 'professional skills';
    
    // Extract key requirements from job description
    const description = request.plainDescription.toLowerCase();
    let keyRequirement = 'your requirements';
    if (description.includes('experience')) keyRequirement = 'the experience requirements';
    else if (description.includes('skills')) keyRequirement = 'the technical skills needed';
    else if (description.includes('responsible')) keyRequirement = 'the responsibilities outlined';
    
    // Create more natural, personalized template
    return `Dear Hiring Manager,

I am excited to apply for the ${request.name} position at ${request.employerName}. My expertise in ${primarySkill} and ${secondarySkills} makes me well-suited for this role.

I have developed strong capabilities that directly match ${keyRequirement}. Your job posting particularly caught my attention because it emphasizes skills I have successfully applied in previous positions. I am eager to bring this experience to your team in ${request.areaName}.

I would appreciate the opportunity to discuss how my background can contribute to ${request.employerName}'s continued success. Thank you for your time and consideration.

Best regards,
[Your Name]`;
  }


}

export const aiClient = new AIClient();
