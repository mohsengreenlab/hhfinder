import { GoogleGenerativeAI } from '@google/generative-ai';

const apiKey = process.env.GEMINI_API_KEY || '';
if (!apiKey) {
  console.error('GEMINI_API_KEY not found in environment variables');
} else {
  console.log('Gemini API key loaded, length:', apiKey.length);
}

const genAI = new GoogleGenerativeAI(apiKey);

export class AIClient {
  private model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
  private proModel = genAI.getGenerativeModel({ model: 'gemini-1.5-pro' });
  private lastRequestTime = 0;
  private readonly MIN_REQUEST_INTERVAL = 2000; // 2 seconds between requests

  private async waitForRateLimit(): Promise<void> {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;
    
    if (timeSinceLastRequest < this.MIN_REQUEST_INTERVAL) {
      const waitTime = this.MIN_REQUEST_INTERVAL - timeSinceLastRequest;
      console.log(`üïí Rate limiting: waiting ${waitTime}ms before next AI request`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
    
    this.lastRequestTime = Date.now();
  }

  private async makeAIRequest<T>(
    requestFn: () => Promise<T>,
    maxRetries: number = 3,
    baseDelay: number = 1000
  ): Promise<T> {
    await this.waitForRateLimit();
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        return await requestFn();
      } catch (error: any) {
        const isRetryable = error?.status === 503 || error?.status === 429 || error?.status === 500;
        
        if (!isRetryable || attempt === maxRetries) {
          throw error;
        }
        
        const delay = baseDelay * Math.pow(2, attempt - 1); // Exponential backoff
        console.log(`‚ö†Ô∏è  AI request failed (attempt ${attempt}/${maxRetries}), retrying in ${delay}ms...`);
        console.log(`Error: ${error?.status} - ${error?.message}`);
        
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    throw new Error('Max retries exceeded');
  }

  async generateRussianSeedTerms(userInput: string): Promise<{
    exactPhrases: string[];
    strongSynonyms: string[];
    weakAmbiguous: string[];
    allowedEnglishAcronyms: string[];
  }> {
    // Stage 1: Generate job-relevant keywords
    const stage1Keywords = await this.generateJobKeywords(userInput);
    
    // Stage 2: Validate they are actual job titles
    const validatedKeywords = await this.validateJobTitles(stage1Keywords);
    
    return validatedKeywords;
  }

  private async generateJobKeywords(userInput: string): Promise<string[]> {
    const prompt = `
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É —Ä—ã–Ω–∫—É –†–æ—Å—Å–∏–∏ –∏ —Å–∞–π—Ç—É HH.ru. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É: "${userInput}"

–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

–ü–†–ê–í–ò–õ–ê:
1. –¢–û–õ–¨–ö–û —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
2. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (Python, JavaScript, SQL, React, Node.js, Docker, AWS, etc.)
3. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π - –ø–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
4. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∫–∞–∫ –Ω–∞ HH.ru
5. –í–∫–ª—é—á–∞–π —Å–∏–Ω–æ–Ω–∏–º—ã –∏ —Å–º–µ–∂–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏

–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤:
- "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç Python" –≤–º–µ—Å—Ç–æ "Python developer"  
- "–∏–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" –≤–º–µ—Å—Ç–æ "software engineer"
- "—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" –≤–º–µ—Å—Ç–æ "frontend developer"
- "–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º" –≤–º–µ—Å—Ç–æ "sales manager"

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
["—Ç–µ—Ä–º–∏–Ω 1", "—Ç–µ—Ä–º–∏–Ω 2", "—Ç–µ—Ä–º–∏–Ω 3"]

–ú–∞–∫—Å–∏–º—É–º 15 —Ç–µ—Ä–º–∏–Ω–æ–≤.`;

    try {
      const result = await this.makeAIRequest(async () => {
        return await this.model.generateContent(prompt);
      });
      const response = result.response.text().trim();
      
      // Extract JSON from response
      let jsonText = response;
      if (response.includes('```json')) {
        jsonText = response.split('```json')[1].split('```')[0].trim();
      } else if (response.includes('```')) {
        jsonText = response.split('```')[1].split('```')[0].trim();
      }
      
      const parsed = JSON.parse(jsonText);
      return Array.isArray(parsed) ? parsed.slice(0, 15) : [];
      
    } catch (error) {
      console.error('Stage 1 keyword generation failed:', error);
      // Fallback to predefined keywords
      const input = userInput.toLowerCase().trim();
      return this.getFallbackJobKeywords(input);
    }
  }

  private async validateJobTitles(keywords: string[]): Promise<{
    exactPhrases: string[];
    strongSynonyms: string[];
    weakAmbiguous: string[];
    allowedEnglishAcronyms: string[];
  }> {
    if (keywords.length === 0) {
      return { exactPhrases: [], strongSynonyms: [], weakAmbiguous: [], allowedEnglishAcronyms: [] };
    }

    const prompt = `
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º –Ω–∞ HH.ru. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö —è–≤–ª—è—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π/–¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π.

–¢–µ—Ä–º–∏–Ω—ã: ${JSON.stringify(keywords)}

–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–∞–∂–¥—ã–π —Ç–µ—Ä–º–∏–Ω:
- exactPhrases: —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä")
- strongSynonyms: —Å–∏–ª—å–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–¥–µ–≤–µ–ª–æ–ø–µ—Ä", "–∫–æ–¥–µ—Ä")  
- weakAmbiguous: —Å–ª–∞–±—ã–µ/–Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")
- allowedEnglishAcronyms: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (Python, SQL, React, etc.)

–ü–†–ê–í–ò–õ–ê:
1. –û—Ç–±—Ä–∞—Å—ã–≤–∞–π –æ–±—â–∏–µ —Å–ª–æ–≤–∞ ("—Ä–∞–±–æ—Ç–∞", "–¥–æ–ª–∂–Ω–æ—Å—Ç—å", "–≤–∞–∫–∞–Ω—Å–∏—è")
2. –û—Ç–±—Ä–∞—Å—ã–≤–∞–π –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã ("—è —Ö–æ—á—É", "–Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É")
3. –û—Å—Ç–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏

–í–µ—Ä–Ω–∏ JSON:
{
  "exactPhrases": ["—Ç–æ—á–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è 1"],
  "strongSynonyms": ["—Å–∏–Ω–æ–Ω–∏–º 1"], 
  "weakAmbiguous": ["–Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π 1"],
  "allowedEnglishAcronyms": ["Python", "SQL"]
}`;

    try {
      const result = await this.makeAIRequest(async () => {
        return await this.model.generateContent(prompt);
      });
      const response = result.response.text().trim();
      
      // Extract JSON from response
      let jsonText = response;
      if (response.includes('```json')) {
        jsonText = response.split('```json')[1].split('```')[0].trim();
      } else if (response.includes('```')) {
        jsonText = response.split('```')[1].split('```')[0].trim();
      }
      
      const parsed = JSON.parse(jsonText);
      
      return {
        exactPhrases: (parsed.exactPhrases || []).slice(0, 8),
        strongSynonyms: (parsed.strongSynonyms || []).slice(0, 8),
        weakAmbiguous: (parsed.weakAmbiguous || []).slice(0, 5),
        allowedEnglishAcronyms: (parsed.allowedEnglishAcronyms || []).slice(0, 5)
      };
      
    } catch (error) {
      console.error('Stage 2 job title validation failed:', error);
      // Fallback: manually categorize keywords
      return this.categorizeKeywordsFallback(keywords);
    }
  }

  private getFallbackJobKeywords(input: string): string[] {
    const jobMappings: Record<string, string[]> = {
      '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç': [
        '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç', '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∫–∞', '–±–∞—Ä–º–µ–Ω', '–±–∞—Ä–º–µ–Ω—à–∞', '–ø–µ—Ä—Å–æ–Ω–∞–ª —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', 
        '–æ–±—Å–ª—É–∂–∏–≤–∞—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª', '—Ä–∞–±–æ—Ç–Ω–∏–∫ –∑–∞–ª–∞', '—Å–µ—Ä–≤–µ—Ä', '—Ö–æ—Å—Ç–µ—Å', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ª–∞'
      ],
      '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç': [
        '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–∏–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ü–û', 
        'backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 
        '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'Java —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
      ],
      '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫': [
        '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', 'QA –∏–Ω–∂–µ–Ω–µ—Ä', '—Ç–µ—Å—Ç–µ—Ä', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', 
        '—Ç–µ—Å—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫', 'automation QA', 'manual QA', 'QA engineer', 
        '–∏–Ω–∂–µ–Ω–µ—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ü–û'
      ],
      '–º–µ–Ω–µ–¥–∂–µ—Ä': [
        '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '—É–ø—Ä–∞–≤–ª—è—é—â–∏–π', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        '–ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤', 
        '—Å—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–¥–µ–ª–∞'
      ],
      '–ø—Ä–æ–¥–∞–≤–µ—Ü': [
        '–ø—Ä–æ–¥–∞–≤–µ—Ü', '–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', '—Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
        '–ø—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥–∞–∂',
        '—Ç–æ—Ä–≥–æ–≤—ã–π –∞–≥–µ–Ω—Ç', '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', '—Å–µ–π–ª–∑'
      ],
      '–¥–∏–∑–∞–π–Ω–µ—Ä': [
        '–¥–∏–∑–∞–π–Ω–µ—Ä', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä', '–≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä', 'UI/UX –¥–∏–∑–∞–π–Ω–µ—Ä',
        '–¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤', '–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', '–º–æ—É—à–Ω –¥–∏–∑–∞–π–Ω–µ—Ä',
        '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', '–≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', '–∞—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä'
      ],
      '–∞–Ω–∞–ª–∏—Ç–∏–∫': [
        '–∞–Ω–∞–ª–∏—Ç–∏–∫', '–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫', '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫', 'data analyst',
        '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫', '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫', '–≤–µ–±-–∞–Ω–∞–ª–∏—Ç–∏–∫',
        '–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö', '–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', 'BI –∞–Ω–∞–ª–∏—Ç–∏–∫'
      ],
      '–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥': [
        '–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', 'digital –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', 'SMM –º–µ–Ω–µ–¥–∂–µ—Ä',
        '–∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥-–º–µ–Ω–µ–¥–∂–µ—Ä',
        'performance –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', '–±—Ä–µ–Ω–¥-–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø—Ä–æ–¥–∞–∫—Ç-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥'
      ],
      '–±—É—Ö–≥–∞–ª—Ç–µ—Ä': [
        '–±—É—Ö–≥–∞–ª—Ç–µ—Ä', '–≥–ª–∞–≤–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä', '–ø–æ–º–æ—â–Ω–∏–∫ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞', '—ç–∫–æ–Ω–æ–º–∏—Å—Ç',
        '—Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —É—á–µ—Ç—É', '–±—É—Ö–≥–∞–ª—Ç–µ—Ä-–∫–∞—Å—Å–∏—Ä',
        '–Ω–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', '–∫–∞–∑–Ω–∞—á–µ–π'
      ],
      '–≤–æ–¥–∏—Ç–µ–ª—å': [
        '–≤–æ–¥–∏—Ç–µ–ª—å', '—à–æ—Ñ–µ—Ä', '–∫—É—Ä—å–µ—Ä', '—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä', '–≤–æ–¥–∏—Ç–µ–ª—å-—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä',
        '–≤–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–∑–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', '–≤–æ–¥–∏—Ç–µ–ª—å –ª–µ–≥–∫–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
        '–≤–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–±—É—Å–∞', '—Ç–∞–∫—Å–∏—Å—Ç', '–ª–∏—á–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å'
      ]
    };

    // Find the best matching job category
    for (const [key, terms] of Object.entries(jobMappings)) {
      if (input.toLowerCase().includes(key)) {
        return terms.slice(0, 15); // Return up to 15 terms
      }
    }

    // If no specific mapping found, try partial matches
    const partialMatches: string[] = [];
    if (input.includes('—Ä–∞–∑—Ä–∞–±–æ—Ç')) partialMatches.push(...jobMappings['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç']);
    if (input.includes('—Ç–µ—Å—Ç')) partialMatches.push(...jobMappings['—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫']);
    if (input.includes('—É–ø—Ä–∞–≤') || input.includes('—Ä—É–∫–æ–≤')) partialMatches.push(...jobMappings['–º–µ–Ω–µ–¥–∂–µ—Ä']);
    if (input.includes('–ø—Ä–æ–¥–∞') || input.includes('—Ç–æ—Ä–≥')) partialMatches.push(...jobMappings['–ø—Ä–æ–¥–∞–≤–µ—Ü']);
    if (input.includes('–¥–∏–∑–∞–π–Ω') || input.includes('—Ö—É–¥–æ–∂–Ω')) partialMatches.push(...jobMappings['–¥–∏–∑–∞–π–Ω–µ—Ä']);

    if (partialMatches.length > 0) {
      return Array.from(new Set(partialMatches)).slice(0, 15);
    }

    // Generic fallback - create variations of the input
    const cleanInput = input.replace(/—è —Ö–æ—á—É –±—ã—Ç—å|—è —Ö–æ—á—É|—Ö–æ—á—É –±—ã—Ç—å|—Ä–∞–±–æ—Ç–∞—Ç—å/gi, '').trim();
    return [cleanInput, `—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ ${cleanInput}`, `${cleanInput} –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç`].filter(Boolean);
  }

  private categorizeKeywordsFallback(keywords: string[]): {
    exactPhrases: string[];
    strongSynonyms: string[];
    weakAmbiguous: string[];
    allowedEnglishAcronyms: string[];
  } {
    const result = {
      exactPhrases: [] as string[],
      strongSynonyms: [] as string[],
      weakAmbiguous: [] as string[],
      allowedEnglishAcronyms: [] as string[]
    };

    const technicalTerms = ['Python', 'JavaScript', 'SQL', 'React', 'Node.js', 'Docker', 'AWS', 'GCP', 'ML', 'NLP', 'Java', 'C++', 'TypeScript', 'Angular', 'Vue'];
    const exactJobs = [
      '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç', '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∫–∞', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–¥–∏–∑–∞–π–Ω–µ—Ä', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', '–ø—Ä–æ–¥–∞–≤–µ—Ü',
      '–±—É—Ö–≥–∞–ª—Ç–µ—Ä', '–≤–æ–¥–∏—Ç–µ–ª—å', '–∫—É—Ä—å–µ—Ä', '–±–∞—Ä–º–µ–Ω', '–±–∞—Ä–º–µ–Ω—à–∞', '–ø–æ–≤–∞—Ä', '–∫–∞—Å—Å–∏—Ä', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      '—Å–µ–∫—Ä–µ—Ç–∞—Ä—å', '—é—Ä–∏—Å—Ç', '–≤—Ä–∞—á', '—É—á–∏—Ç–µ–ª—å', '–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å', '–∏–Ω–∂–µ–Ω–µ—Ä', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫'
    ];
    const strongSynonyms = [
      '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–¥–µ–≤–µ–ª–æ–ø–µ—Ä', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä', '—É–ø—Ä–∞–≤–ª—è—é—â–∏–π',
      '—Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', '–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', '–ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä',
      '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
      'QA –∏–Ω–∂–µ–Ω–µ—Ä', '—Ç–µ—Å—Ç–µ—Ä', '–∏–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    ];
    const weakTerms = ['—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '—ç–∫—Å–ø–µ—Ä—Ç', '—Ä–∞–±–æ—Ç–Ω–∏–∫', '–ø–æ–º–æ—â–Ω–∏–∫', '—Å—Ç–∞–∂–µ—Ä', 'junior'];

    // Ensure we have at least 10 keywords total by prioritizing the most relevant
    const totalNeeded = 10;
    let totalAssigned = 0;

    for (const keyword of keywords.slice(0, 15)) { // Process up to 15 keywords
      if (totalAssigned >= totalNeeded) break;
      
      const lower = keyword.toLowerCase();
      let assigned = false;
      
      // Check for technical terms first
      if (technicalTerms.some(tech => keyword.includes(tech))) {
        result.allowedEnglishAcronyms.push(keyword);
        assigned = true;
      }
      // Check for exact job titles
      else if (exactJobs.some(job => lower.includes(job))) {
        result.exactPhrases.push(keyword);
        assigned = true;
      }
      // Check for strong synonyms
      else if (strongSynonyms.some(syn => lower.includes(syn))) {
        result.strongSynonyms.push(keyword);
        assigned = true;
      }
      // Check for weak terms
      else if (weakTerms.some(weak => lower.includes(weak))) {
        result.weakAmbiguous.push(keyword);
        assigned = true;
      }
      // Default categorization for remaining terms
      else {
        // If it looks like a job title, put in exact phrases
        if (keyword.length <= 25 && !keyword.includes('—è —Ö–æ—á—É') && !keyword.includes('—Ä–∞–±–æ—Ç–∞—Ç—å')) {
          result.strongSynonyms.push(keyword);
          assigned = true;
        }
      }
      
      if (assigned) totalAssigned++;
    }

    // Ensure we have at least 10 total keywords distributed properly
    const currentTotal = result.exactPhrases.length + result.strongSynonyms.length + 
                        result.weakAmbiguous.length + result.allowedEnglishAcronyms.length;
    
    if (currentTotal < 10 && keywords.length > currentTotal) {
      // Add remaining keywords as strong synonyms up to 10 total
      const remaining = keywords.slice(currentTotal, 10);
      for (const keyword of remaining) {
        if (!keyword.includes('—è —Ö–æ—á—É') && keyword.trim().length > 2) {
          result.strongSynonyms.push(keyword);
        }
      }
    }

    // Cap each category to reasonable limits
    result.exactPhrases = result.exactPhrases.slice(0, 5);
    result.strongSynonyms = result.strongSynonyms.slice(0, 5);
    result.weakAmbiguous = result.weakAmbiguous.slice(0, 3);
    result.allowedEnglishAcronyms = result.allowedEnglishAcronyms.slice(0, 3);

    return result;
  }

  // AI relevance filtering for keywords
  async filterKeywordsByRelevance(userInput: string, keywords: string[]): Promise<{text: string; relevanceScore: number}[]> {
    const prompt = `
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∑–∞–ø—Ä–æ—Å: "${userInput}"

–û—Ü–µ–Ω–∏ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ —à–∫–∞–ª–µ 0-10:
- 10: –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Ç–æ—á–Ω—ã–π —Å–∏–Ω–æ–Ω–∏–º
- 8-9: –û—á–µ–Ω—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (—Ç–∞ –∂–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –Ω–æ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏)  
- 6-7: –ü–æ—Ö–æ–∂–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ —Å–º–µ–∂–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
- 4-5: –û—Ç–¥–∞–ª—ë–Ω–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
- 0-3: –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã

–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏: ${JSON.stringify(keywords)}

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ "text" –∏ "relevanceScore":
[
  {"text": "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", "relevanceScore": 9},
  {"text": "–¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ", "relevanceScore": 6}
]

–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

    try {
      const result = await this.makeAIRequest(async () => {
        return await this.model.generateContent(prompt);
      });
      const response = result.response.text().trim();
      
      // Extract JSON from response
      let jsonText = response;
      if (response.includes('```json')) {
        jsonText = response.split('```json')[1].split('```')[0].trim();
      } else if (response.includes('```')) {
        jsonText = response.split('```')[1].split('```')[0].trim();
      }
      
      const parsed = JSON.parse(jsonText);
      
      // Validate and sort by relevance score
      const validatedResults = parsed
        .filter((item: any) => item.text && typeof item.relevanceScore === 'number')
        .sort((a: any, b: any) => b.relevanceScore - a.relevanceScore);
      
      return validatedResults;
    } catch (error) {
      console.error('AI relevance filtering failed:', error);
      // Enhanced fallback: assign relevance based on keyword position and content
      return keywords.map((text, index) => {
        // Give higher scores to earlier keywords and exact matches
        let score = Math.max(8 - index, 3); // Start high, decrease by position
        
        // Boost score for exact or partial matches with user input
        const lowerInput = userInput.toLowerCase();
        const lowerText = text.toLowerCase();
        
        if (lowerText === lowerInput) {
          score = 10; // Exact match
        } else if (lowerText.includes(lowerInput) || lowerInput.includes(lowerText)) {
          score = Math.min(score + 2, 9); // Partial match boost
        }
        
        return { text, relevanceScore: score };
      }).sort((a, b) => b.relevanceScore - a.relevanceScore);
    }
  }

  // Keep the legacy method for backward compatibility (deprecated)
  async generateJobTitles(userInput: string): Promise<string[]> {
    const seeds = await this.generateRussianSeedTerms(userInput);
    return [
      ...seeds.exactPhrases,
      ...seeds.strongSynonyms,
      ...seeds.weakAmbiguous,
      ...seeds.allowedEnglishAcronyms
    ];
  }

  async mapFiltersToHH(
    answers: any, 
    dictionaries: any
  ): Promise<{
    text: string;
    area?: string;
    experience?: string;
    employment?: string[];
    schedule?: string[];
    salary?: number;
    currency?: string;
    only_with_salary?: boolean;
    period?: number;
    order_by?: string;
  }> {
    const prompt = `
You are an HH.ru API specialist. Convert user answers to HH.ru search parameters.

User answers: ${JSON.stringify(answers)}

Available values from HH.ru dictionaries:
Experience: ${JSON.stringify(dictionaries.experience)}
Employment type: ${JSON.stringify(dictionaries.employment)}
Schedule: ${JSON.stringify(dictionaries.schedule)}
Currencies: ${JSON.stringify(dictionaries.currency)}
Sort order: ${JSON.stringify(dictionaries.vacancy_search_order)}

The user has selected these job keywords: ${answers.selectedKeywords?.join(', ') || 'none'}

Search options:
- Title-first search: ${answers.titleFirstSearch ? 'enabled (use search_field: ["name"])' : 'disabled (search all fields)'}
- Exact phrases: ${answers.useExactPhrases ? 'enabled (wrap keywords in quotes)' : 'disabled (plain text)'}

Important: Only include filter parameters in the response if the corresponding enableXFilter flag is true. For example, only include "area" if enableLocationFilter is true.

Return a JSON object with correct IDs from dictionaries. For the "text" field, combine the selected keywords considering the search options:
{
  "text": "combine selected keywords into search string",
  "area": "1", // Area ID (1 = Moscow, 2 = SPb, etc.)
  "experience": "ID_from_dictionary",
  "employment": ["ID1", "ID2"],
  "schedule": ["ID1", "ID2"], 
  "salary": number,
  "currency": "RUR",
  "only_with_salary": true/false,
  "period": number_of_days,
  "order_by": "sort_ID",
  "metro": "metro_station_id",
  "search_field": ["field_ID1", "field_ID2"],
  "label": ["label_ID1", "label_ID2"],
  "employer_id": "company_name_or_id",
  "education_level": "education_ID",
  "working_time_modes": ["mode_ID1", "mode_ID2"]
}
`;

    try {
      const result = await this.proModel.generateContent({
        contents: [{ role: 'user', parts: [{ text: prompt }] }],
        generationConfig: {
          temperature: 0.1,
          topK: 1,
          topP: 0.8,
        },
      });

      const response = result.response.text();
      const cleanJson = response.replace(/```json\n?|```\n?/g, '').trim();
      
      try {
        return JSON.parse(cleanJson);
      } catch (parseError) {
        console.error('Failed to parse AI response as JSON:', cleanJson);
        throw new Error('AI returned invalid JSON format');
      }
    } catch (error) {
      console.error('Filter mapping failed:', error);
      // Return basic fallback with proper keyword combination, but only include enabled filters
      const keywords = answers.selectedKeywords || [];
      
      // Apply exact phrases if enabled
      let keywordText: string;
      if (answers.useExactPhrases) {
        keywordText = keywords.map((k: string) => `"${k}"`).join(' OR ');
      } else {
        keywordText = keywords.join(' OR ');
      }
      
      const fallback: any = {
        text: keywordText
      };
      
      // Add search_field=name if title-first search is enabled
      if (answers.titleFirstSearch) {
        fallback.search_field = ['name'];
      }
      
      // Only include filters that are explicitly enabled
      if (answers.enableLocationFilter && answers.locationText) {
        fallback.area = answers.locationText?.includes('–ú–æ—Å–∫–≤–∞') ? '1' : undefined;
      }
      if (answers.enableExperienceFilter && answers.experienceText) {
        fallback.experience = 'doesNotMatter';
      }
      if (answers.enableEmploymentFilter && answers.employmentTypes?.length) {
        fallback.employment = ['full'];
      }
      if (answers.enableScheduleFilter && answers.scheduleTypes?.length) {
        fallback.schedule = ['fullDay'];
      }
      if (answers.enableSalaryFilter && answers.incomeNumber) {
        fallback.salary = answers.incomeNumber;
        fallback.currency = answers.currency || 'RUR';
        fallback.only_with_salary = answers.onlyWithSalary || false;
      }
      if (answers.enableMetroFilter && answers.metroStation) {
        fallback.metro = answers.metroStation;
      }
      if (answers.enableLabelFilter && answers.vacancyLabels?.length) {
        fallback.label = answers.vacancyLabels;
      }
      if (answers.enableEducationFilter && answers.educationLevel) {
        fallback.education_level = answers.educationLevel;
      }
      if (answers.enableWorkFormatFilter && answers.workFormats?.length) {
        fallback.working_time_modes = answers.workFormats;
      }
      
      // Always include basic search params
      fallback.period = answers.period || 7;
      fallback.order_by = answers.orderBy || 'relevance';
      
      return fallback;
    }
  }

  async generateCoverLetter(request: {
    name: string;
    employerName: string;
    areaName: string;
    skillsList: string[];
    plainDescription: string;
    userProfile?: string;
    customPrompt?: string;
  }): Promise<string> {
    const systemPrompt = `
You write concise, polite cover letters in English for real job applicants.

Requirements:
- 150-220 words
- 3 short paragraphs
- Mention 2-4 relevant skills
- Include 1 specific fact from the job posting
- No fluff or clich√©s
- Professional tone
`;

    let userPrompt = request.customPrompt || `
Write a professional cover letter for this job:
Position: ${request.name}
Company: ${request.employerName}
Location: ${request.areaName}
Key skills: ${request.skillsList.join(', ')}

Job description:
${request.plainDescription.substring(0, 1000)}

${request.userProfile ? `Applicant profile: ${request.userProfile}` : ''}
`;

    // Replace placeholders in custom prompts
    if (request.customPrompt) {
      userPrompt = request.customPrompt
        .replace(/\{\{POSITION\}\}/g, request.name)
        .replace(/\{\{COMPANY\}\}/g, request.employerName)
        .replace(/\{\{LOCATION\}\}/g, request.areaName)
        .replace(/\{\{SKILLS\}\}/g, request.skillsList.join(', '))
        .replace(/\{\{DESCRIPTION\}\}/g, request.plainDescription.substring(0, 1500));
    }

    try {
      // Use a simpler prompt format that works better with Gemini
      const fullPrompt = `${systemPrompt}\n\n${userPrompt}`;
      
      const result = await this.makeAIRequest(async () => {
        return await this.model.generateContent(fullPrompt);
      });
      return result.response.text().trim();
    } catch (error) {
      console.error('Cover letter generation failed:', error);
      console.error('Error details:', {
        status: (error as any)?.status,
        statusText: (error as any)?.statusText,
        message: error instanceof Error ? error.message : String(error)
      });
      
      // If rate limited, provide a template-based fallback
      if ((error as any)?.status === 429) {
        return this.generateFallbackCoverLetter(request);
      }
      
      throw new Error('Failed to generate cover letter');
    }
  }

  private generateFallbackCoverLetter(request: {
    name: string;
    employerName: string;
    areaName: string;
    skillsList: string[];
    plainDescription: string;
    userProfile?: string;
    customPrompt?: string;
  }): string {
    // Generate a professional template-based cover letter when AI is rate-limited
    const skills = request.skillsList.slice(0, 4).join(', ');
    const hasProfile = request.userProfile && request.userProfile.trim().length > 0;
    
    return `Dear Hiring Manager,

I am writing to express my strong interest in the ${request.name} position at ${request.employerName}${request.areaName ? ` in ${request.areaName}` : ''}. Based on the job requirements, I believe my skills and experience make me an excellent candidate for this role.

My technical expertise includes ${skills}, which align well with the position requirements. ${hasProfile ? `${request.userProfile!.trim()}` : 'I am passionate about delivering high-quality solutions and contributing to team success.'} I am particularly excited about the opportunity to work with your team and contribute to ${request.employerName}'s continued growth.

I would welcome the opportunity to discuss how my skills and enthusiasm can contribute to your team's success. Thank you for considering my application, and I look forward to hearing from you soon.

Best regards,
[Your Name]`;
  }


}

export const aiClient = new AIClient();
